package com.seek.map;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

/**
 * 有序!!!!
 * @author lcy
 *
 */
public class LinkedHashMapDemo {

	public static void main(String[] args) {
		/**
		 * initialCapacity   初始容量大小，使用无参构造方法时，此值默认是16
		 * loadFactor        加载因子，使用无参构造方法时，此值默认是 0.75f
		 * 					加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，它衡量的是一个散列表的空间的使用程度，负载因子越大表示散列表的装填程度越高，反之愈小。对于使用链表法的散列表来说，查找一个元素的平均时间是O(1+a)，因此如果负载因子越大，对空间的利用更充分，然而后果是查找效率的降低；如果负载因子太小，那么散列表的数据将过于稀疏，对空间造成严重浪费。系统默认负载因子为0.75
		 * accessOrder       false： 基于插入顺序     true：  基于访问顺序 
		 */
		LinkedHashMap<String, String> map = new LinkedHashMap<>(10, 0.75f, true);
		
		map.put("1", "a");
		map.put("2", "b");
		map.put("3", "c");
		map.put("4", "d");
		map.put("5", "e");
		map.put("6", "f");
		map.put("7", "g");
		map.put("8", "h");
		map.put("9", "i");
		map.put("10", "j");
		
		showData(map);
	}

	private static void showData(LinkedHashMap<String, String> map) {
//		Iterator<String> iterator = map.keySet().iterator();
//		
//		while(iterator.hasNext()){
//			String key = iterator.next();
//			//值得注意的是，在accessOrder模式下，只要执行get或者put等操作的时候，就会产生structural modification
//			System.out.println(key+"="+map.get(key));
//		}
		
		Iterator<Map<K, V>.Entry<String, String>> iterator = map.entrySet().iterator();
	}

}
