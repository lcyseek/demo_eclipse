package com.example.eventbus;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;
import de.greenrobot.event.EventBus;

public class MainActivity extends Activity {

	private static String TAG = "MainActivity";
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		EventBus.getDefault().register(this);
	}


	public void postInMain(View view){
		EventBus.getDefault().post("这是主线程post的msg");
	}
	
	public void postInThread(View view){
		EventBus.getDefault().post("这是子线程post的msg");
	}
	
	//与发布者在同一个线程
	public void onEvent(String msg) {
		Log.i(TAG+" onEvent", Thread.currentThread().getName()+"---->"+msg);
	}
	
	/**
	 * 执行在主线程。
     * 非常实用，可以在这里将子线程加载到的数据直接设置到界面中。
	 * @param msg
	 */
	public void onEventMainThread(String msg) {
		Log.i(TAG+" onEventMainThread", Thread.currentThread().getName()+"---->"+msg);	}
	
	/**
	 * 执行在子线程，如果发布者是子线程则直接执行，如果发布者不是子线程，则创建一个再执行
	 */
	 public void onEventBackgroundThread(String msg){
		 Log.i(TAG+" onEventBackgroundThread", Thread.currentThread().getName()+"---->"+msg);
	 }

	 /**
	  * 执行在在一个新的子线程
      * 适用于多个线程任务处理， 内部有线程池管理。
	  */
	 public void onEventAsync(String msg){
		 Log.i(TAG+" onEventAsync", Thread.currentThread().getName()+"---->"+msg);
	 }

}
