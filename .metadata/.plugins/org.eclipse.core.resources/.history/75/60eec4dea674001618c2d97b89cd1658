package com.seek.collection.queue;

import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.concurrent.PriorityBlockingQueue;

public class PriorityBlockingQueueDemo {

	public static void main(String[] args) {
		
		Comparator<Integer> comparator = new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				// TODO Auto-generated method stub
				return o2.intValue() - o1.intValue();
			}
		};
		
		PriorityBlockingQueue<Integer> queue = new PriorityBlockingQueue<>(10, comparator);
		
		queue.offer(2);
		queue.offer(7);
		queue.offer(1);
		queue.offer(9);
		queue.offer(6);
		queue.offer(3);
		queue.offer(5);
		queue.offer(4);
		queue.offer(0);
		queue.offer(8);

		queue.offer(100);
		queue.offer(100);
		System.out.println("----");
	}
	
	private static void traverse1(PriorityQueue<Integer> deque) {

		String s = "[";
		Integer ret;
		while( (ret = deque.poll()) != null){
			s += ret.intValue()+" ";
		}
		s += "]";
		System.out.println(s);
	}

}
